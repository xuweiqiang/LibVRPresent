// Alchemy Filter GUIDS and MediaTypes
// audshow.h
// Copyright (c) 2007 - 2008  RMI Corp.

#ifndef __AUDSHOW_H__
#define __AUDSHOW_H__

#pragma pack(1)
#ifndef WAVE_FORMAT_MSAUDIO1
#define WAVE_FORMAT_MSAUDIO1  0x0160
typedef struct tMSAUDIO1WAVEFORMAT
{
  WAVEFORMATEX wfx;
  unsigned short  wSamplesPerBlock;
  unsigned short  wEncodeOptions;

} MSAUDIO1WAVEFORMAT;
#endif

#ifndef WAVE_FORMAT_WMAUDIO2
#define WAVE_FORMAT_WMAUDIO2  0x0161
typedef struct tWMAUDIO2WAVEFORMAT
{
  WAVEFORMATEX wfx;
  unsigned long  dwSamplesPerBlock;
  unsigned short wEncodeOptions;
  unsigned long  dwSuperBlockAlign;

} WMAUDIO2WAVEFORMAT;
#endif
#pragma pack()

#define WAVE_FORMAT_AAC         0x00FF
#define WAVE_FORMAT_AAC_RAW     0x32FF
#define WAVE_FORMAT_VORBIS      0x674F
#define WAVE_FORMAT_SPEEX       0xa109
#define WAVE_FORMAT_AC3         0x2000
// These two are for our own internal use only, and are hopefully unique.
#define WAVE_FORMAT_AIFF_PCM    0x1523
#define WAVE_FORMAT_MUXED_LPCM  0xa5a6

#ifndef REFERENCE_TIME
  typedef LONGLONG REFERENCE_TIME;
#endif

typedef struct StreamInfo_s
{
  GUID*           Type;
  GUID*           SubType;
  LONGLONG        LenInBytes;
  REFERENCE_TIME  LenInMS;
  LONGLONG        Offset;  //offset where actual data begins
  unsigned int    AvgBitrate;
  unsigned int    MaxBitrate;
  unsigned int    SampleSize;
  unsigned int    SampleCount;
  GUID            FormatType;
  ULONG           FormatSize;
  BYTE*           Format;
} StreamInfo_t;

#define WAVE_FORMAT_DOLBY_AC3 0x2000
typedef struct tagDOLBYAC3WAVEFORMAT
{
  WAVEFORMATEX     wfx;
  BYTE             bBigEndian;     /* TRUE = Big Endian, FALSE little endian */
  BYTE             bsid;
  BYTE             lfeon;
  BYTE             copyrightb;
  BYTE             nAuxBitsCode;  /*  Aux bits per frame */
} DOLBYAC3WAVEFORMAT;

// {05589f90-c356-11ce-bf01-00aa0055595a}
DEFINE_GUID(FORMAT_VideoInfoEx,
0x05589f90, 0xc356, 0x11ce, 0xbf, 0x01, 0x00, 0xaa, 0x00, 0x55, 0x59, 0x5a);

typedef struct tagVIDEOINFOHEADEREX
{
  RECT             rcSource;          // The bit we really want to use
  RECT             rcTarget;          // Where the video should go
  DWORD            dwBitRate;         // Approximate bit data rate
  DWORD            dwBitErrorRate;    // Bit error rate for this stream
  REFERENCE_TIME   AvgTimePerFrame;   // Average time per frame (100ns units)
  BITMAPINFOHEADER bmiHeader;
  DWORD            vihSize;           // size struct, included extra data at end
  DWORD            SizeConsumed;      // input bytes consumed
} VIDEOINFOHEADEREX;

// 6bddfa7e-9f22-46a9-ab5e-884eff294d9f
// from http://svn.xiph.org/trunk/oggds/OggDS.h
DEFINE_GUID(FORMAT_VorbisFormat,
0x6bddfa7e, 0x9f22, 0x46a9, 0xab, 0x5e, 0x88, 0x4e, 0xff, 0x29, 0x4d, 0x9f);

DEFINE_GUID(FORMAT_SpeexFormat,
0x6bddfa7d, 0x9f22, 0x56a9, 0xab, 0x5e, 0x88, 0x4e, 0xff, 0x29, 0x4d, 0x9e);

typedef struct tagVORBISFORMAT
{
  WORD  nChannels;
  long  nSamplesPerSec;
  long  nMinBitsPerSec;
  long  nAvgBitsPerSec;
  long  nMaxBitsPerSec;
  float fQuality;
} VORBISFORMAT;

typedef struct tagSPEEXFORMAT
{
  WORD  nChannels;
  long  nSamplesPerSec;
  long  nMinBitsPerSec;
  long  nAvgBitsPerSec;
  long  nMaxBitsPerSec;
  float fQuality;
} SPEEXFORMAT;

// AUDIO FILTER GUIDS
// {3DF9ACFD-057E-4de1-8B67-F69DD4905579}
DEFINE_GUID(CLSID_WMADecoderFilter,
0x3df9acfd, 0x57e, 0x4de1, 0x8b, 0x67, 0xf6, 0x9d, 0xd4, 0x90, 0x55, 0x79);

// {D1E456E1-47E5-497a-ABA1-A0C57C3CE5C0}
DEFINE_GUID(CLSID_VORBISDecoderFilter,
0xd1e456e1, 0x47e5, 0x497a, 0xab, 0xa1, 0xa0, 0xc5, 0x7c, 0x3c, 0xe5, 0xc0);

// {D1E456E1-47E5-497a-ABA1-A0C57C3CE5C1}
DEFINE_GUID(CLSID_SPEEXDecoderFilter,
0xd1e456e1, 0x47e5, 0x497a, 0xab, 0xa1, 0xa0, 0xc5, 0x7c, 0x3c, 0xe5, 0xc1);

// {B380606B-B500-4001-ABA9-635D24D95504}
DEFINE_GUID(CLSID_LosslessDecoderFilter,
0xb380606b, 0xb500, 0x4001, 0xab, 0xa9, 0x63, 0x5d, 0x24, 0xd9, 0x55, 0x4);

// {313F1007-5458-4275-8143-E760A1D73D0F}
DEFINE_GUID(CLSID_AACDecoderFilter,
0x313f1007, 0x5458, 0x4275, 0x81, 0x43, 0xe7, 0x60, 0xa1, 0xd7, 0x3d, 0xf);

// {1F3F5741-A9EE-4bd9-B64E-99C5534B3817}
DEFINE_GUID(CLSID_AC3DecoderFilter,
0x1f3f5741, 0xa9ee, 0x4bd9, 0xb6, 0x4e, 0x99, 0xc5, 0x53, 0x4b, 0x38, 0x17);

// {C8F59247-8FAA-42d9-93A6-EF32961644B2}
DEFINE_GUID(CLSID_MP3DecoderFilter,
0xc8f59247, 0x8faa, 0x42d9, 0x93, 0xa6, 0xef, 0x32, 0x96, 0x16, 0x44, 0xb2);

// {D671081F-883C-439f-B47E-EBD3B3CF866C}
DEFINE_GUID(CLSID_PCMDecoderFilter,
0xd671081f, 0x883c, 0x439f, 0xb4, 0x7e, 0xeb, 0xd3, 0xb3, 0xcf, 0x86, 0x6c);

// VIDEO FILTER GUIDS

// {642D2F48-5E4F-40a5-9B55-4676C7FC7341}
DEFINE_GUID(CLSID_WMVDecoderFilter,
0x642d2f48, 0x5e4f, 0x40a5, 0x9b, 0x55, 0x46, 0x76, 0xc7, 0xfc, 0x73, 0x41);

// {BF184F4B-76A5-4701-95A9-11F04C03AFA4}
DEFINE_GUID(CLSID_VC1DecoderFilter,
0xbf184f4b, 0x76a5, 0x4701, 0x95, 0xa9, 0x11, 0xf0, 0x4c, 0x3, 0xaf, 0xa4);

// {2091EB9E-7A6C-440f-A5A6-6C2530BB4C66}
DEFINE_GUID(CLSID_DVXDecoderFilter,
0x2091eb9e, 0x7a6c, 0x440f, 0xa5, 0xa6, 0x6c, 0x25, 0x30, 0xbb, 0x4c, 0x66);

// {B41ABF5F-CDFD-461b-89BB-98579EB2D93F}
DEFINE_GUID(CLSID_MPV2DecoderFilter,
0xb41abf5f, 0xcdfd, 0x461b, 0x89, 0xbb, 0x98, 0x57, 0x9e, 0xb2, 0xd9, 0x3f);

// {5E571447-260F-442c-804E-3C1F588A8C8F}
DEFINE_GUID(CLSID_MP4DecoderFilter,
0x5e571447, 0x260f, 0x442c, 0x80, 0x4e, 0x3c, 0x1f, 0x58, 0x8a, 0x8c, 0x8f);

// {A3DA3894-4A6C-4551-B480-D74E15C1E11D}
DEFINE_GUID(CLSID_H264DecoderFilter,
0xa3da3894, 0x4a6c, 0x4551, 0xb4, 0x80, 0xd7, 0x4e, 0x15, 0xc1, 0xe1, 0x1d);

// {4ADE12D4-F7BA-441b-A71D-46A227A0DDD2}
DEFINE_GUID(CLSID_TeletextFilter,
0x4ade12d4, 0xf7ba, 0x441b, 0xa7, 0x1d, 0x46, 0xa2, 0x27, 0xa0, 0xdd, 0xd2);

// {C670D671-A32A-4048-B51C-F02FD9A09A2F}
DEFINE_GUID(CLSID_SubpictureFilter,
0xc670d671, 0xa32a, 0x4048, 0xb5, 0x1c, 0xf0, 0x2f, 0xd9, 0xa0, 0x9a, 0x2f);

//RENDERERS
// {AC3BB2D5-08E7-4bbb-94BB-0E757AFFFE0F}
DEFINE_GUID(CLSID_SubpictureRenderer,
0xac3bb2d5, 0x8e7, 0x4bbb, 0x94, 0xbb, 0xe, 0x75, 0x7a, 0xff, 0xfe, 0xf);

//Demuxers
// {EFB0FAC4-3DD9-466d-BAC9-51E5EBE20260}
DEFINE_GUID(CLSID_MP4DemuxFilter,
0xefb0fac4, 0x3dd9, 0x466d, 0xba, 0xc9, 0x51, 0xe5, 0xeb, 0xe2, 0x02, 0x60);

// {4ED86BCC-EBBA-43A3-95B9-09131DC2484B}
DEFINE_GUID(CLSID_AviDemuxFilter,
0x4ed86bcc, 0xebba, 0x43a3, 0x95, 0xb9, 0x9, 0x13, 0x1d, 0xc2, 0x48, 0x4b);

// {DC4EE099-C9EA-49c8-9FA2-0A173D1522F1}
DEFINE_GUID(CLSID_PassThruDemuxFilter,
0xdc4ee099, 0xc9ea, 0x49c8, 0x9f, 0xa2, 0xa, 0x17, 0x3d, 0x15, 0x22, 0xf1);

// {DC56E099-C9EA-49c8-9FA2-0A173D1522F1}
DEFINE_GUID(CLSID_MP3DemuxFilter,
0xdc56e099, 0xc9ea, 0x49c8, 0x9f, 0xa2, 0xa, 0x17, 0x3d, 0x15, 0x22, 0xf1);

// {11F9B319-551C-4a7e-A2F4-5528AAABC716}
DEFINE_GUID(CLSID_TSDemuxFilter,
0x11f9b319, 0x551c, 0x4a7e, 0xa2, 0xf4, 0x55, 0x28, 0xaa, 0xab, 0xc7, 0x16);

// {A2226A0B-89FE-42ec-8285-51EAFADDD628}
DEFINE_GUID(CLSID_PSDemuxFilter,
0xa2226a0b, 0x89fe, 0x42ec, 0x82, 0x85, 0x51, 0xea, 0xfa, 0xdd, 0xd6, 0x28);

// {B92B3BF3-21AC-44cb-9FDC-2A4F14B5F87F}
DEFINE_GUID(CLSID_OGMDemuxFilter,
0xb92b3bf3, 0x21ac, 0x44cb, 0x9f, 0xdc, 0x2a, 0x4f, 0x14, 0xb5, 0xf8, 0x7f);

// OTHER GUIDS - Add as they get used
// CD0FB4F1-69F3-4fa5-B42A-08DC41516B3A   Alchemy Audio Renderer
// EFB0FAC3-3DD9-466d-BAC9-51E5EBE20260   Real Media Demux Filter

// MEDIATYPE GUIDS
// {00000010-0000-0010-8000-00AA00389B71}
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioOKIADPCM,
0x00000010, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00000011-0000-0010-8000-00AA00389B71}
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioDVIADPCM,
0x00000011, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00000161-0000-0010-8000-00AA00389B71}
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV8,
0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00000162-0000-0010-8000-00AA00389B71}
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV9,
0x00000162, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00000163-0000-0010-8000-00AA00389B71}
EXTERN_GUID(WMMEDIASUBTYPE_WMAudio_Lossless,
0x00000163, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {55D37CE1-A7AB-4a03-AA20-C170C82AA3B9}
DEFINE_GUID(MEDIASUBTYPE_TTXT,
0x55d37ce1, 0xa7ab, 0x4a03, 0xaa, 0x20, 0xc1, 0x70, 0xc8, 0x2a, 0xa3, 0xb9);

// {F2FB3A54-9982-4aae-8515-1D307EB4B8E4}
DEFINE_GUID(MEDIASUBTYPE_TTXTRE,
0xf2fb3a54, 0x9982, 0x4aae, 0x85, 0x15, 0x1d, 0x30, 0x7e, 0xb4, 0xb8, 0xe4);

#define WAVE_FORMAT_FLAC 0xF1AC
// {0000F1AC-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_FLAC,
WAVE_FORMAT_FLAC, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// from http://svn.xiph.org/trunk/oggds/OggDS.h
// {D2855FA9-61A7-4db0-B979-71F297C17A04}
DEFINE_GUID(MEDIASUBTYPE_Ogg,
0xd2855fa9, 0x61a7, 0x4db0, 0xb9, 0x79, 0x71, 0xf2, 0x97, 0xc1, 0x7a, 0x04);

// from http://svn.xiph.org/trunk/oggds/OggDS.h
// {CDDCA2D5-6D75-4F98-840E-737BEDD5C63B}
DEFINE_GUID(MEDIASUBTYPE_Vorbis,
0xcddca2d5, 0x6d75, 0x4f98, 0x84, 0x0e, 0x73, 0x7b, 0xed, 0xd5, 0xc6, 0x3b);

// {0000674F-0000-0010-8000-00AA00389B71}
// from wmv9 mystery clips
DEFINE_GUID(MEDIASUBTYPE_Vorbis_OGG1,
0x0000674F, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00006750-0000-0010-8000-00AA00389B71}
// from wmv9 mystery clips
DEFINE_GUID(MEDIASUBTYPE_Vorbis_OGG2,
0x00006750, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00006751-0000-0010-8000-00AA00389B71}
// from wmv9 mystery clips
DEFINE_GUID(MEDIASUBTYPE_Vorbis_OGG3,
0x00006751, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {00006771-0000-0010-8000-00AA00389B71}
// Ogg Vorbis 3 plus
DEFINE_GUID(MEDIASUBTYPE_Vorbis_3P,
0x00006771, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {CDDCA2D5-6D75-4F98-840E-737BEDD5C63C}   need to find what the world is using, we made this one up
DEFINE_GUID(MEDIASUBTYPE_Speex,
0xcddca2d5, 0x6d75, 0x4f98, 0x84, 0x0e, 0x73, 0x7b, 0xed, 0xd5, 0xc6, 0x3c);

// {F46D207E-8E1B-4f60-9A91-BEB34DBDB963}
DEFINE_GUID(MEDIASUBTYPE_PCM_AUDIO,
0xf46d207e, 0x8e1b, 0x4f60, 0x9a, 0x91, 0xbe, 0xb3, 0x4d, 0xbd, 0xb9, 0x63);

// {51412B85-DC4F-42fd-8721-F13A350BA86E}
DEFINE_GUID(MEDIASUBTYPE_PostProcPCM,
0x51412b85, 0xdc4f, 0x42fd, 0x87, 0x21, 0xf1, 0x3a, 0x35, 0xb, 0xa8, 0x6e);

// {3E2FEE9E-72D5-44fb-A43D-C53604FC19BE}
DEFINE_GUID(MEDIASUBTYPE_DolbyPostProc,
0x3e2fee9e, 0x72d5, 0x44fb, 0xa4, 0x3d, 0xc5, 0x36, 0x4, 0xfc, 0x19, 0xbe);

// {3E2FDE9E-72D5-44fb-A43D-a53604FC19BE}
DEFINE_GUID(MEDIASUBTYPE_APE,
0x3e2fde9e, 0x72d5, 0x44fb, 0xa4, 0x3d, 0xa5, 0x36, 0x4, 0xfc, 0x19, 0xbe);

// already defined in strmiids.lib
//// {E06D802C-DB46-11CF-B4D1-00805F6CBBEA}
//DEFINE_GUID(MEDIASUBTYPE_DOLBY_AC3,
//0xe06d802c, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x05f, 0x6c, 0xbb, 0xea);

// {00002000-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DVM,
0x00002000, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9b, 0x71);

// {00000055-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_MP3,
0x00000055, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// {4D524441-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_ADRM,
0x4D524441, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

//Divx SubPicture DXRE -> {0x45525844-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DXRE, 0x45525844, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_RLE_    0x20454C52
// {20454C52-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_RLE_,
0x20454C52, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {9ECDAAE9-F0F5-4b0f-A028-634CF4031612}
DEFINE_GUID(MEDIASUBTYPE_AAC_AUDIO,
0x9ecdaae9, 0xf0f5, 0x4b0f, 0xa0, 0x28, 0x63, 0x4c, 0xf4, 0x3, 0x16, 0x12);

// 31564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV1
EXTERN_GUID(WMMEDIASUBTYPE_WMV1,
0x31564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 32564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV2
EXTERN_GUID(WMMEDIASUBTYPE_WMV2,
0x32564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 33564D57-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMV3
EXTERN_GUID(WMMEDIASUBTYPE_WMV3,
0x33564D57, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 31435657-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WVC1
DEFINE_GUID(WMMEDIASUBTYPE_WVC1,
0x31435657, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 31637677-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_wvc1
DEFINE_GUID(WMMEDIASUBTYPE_wvc1,
0x31637677, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// 00000161-0000-0010-8000-00AA00389B71            WMMEDIASUBTYPE_WMAudioV2
EXTERN_GUID(WMMEDIASUBTYPE_WMAudioV2,
0x00000161, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

#define FOURCC_XVID    0x44495658
// {44495658-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_XVID,
0x44495658, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_xvid    0x64697678
// {64697678-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_xvid,
0x64697678, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_SEDG    0x47444553
// {47444553-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_SEDG,
0x47444553, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {C046A911-F8F1-4211-B8DB-700EA082D066}
DEFINE_GUID(MEDIASUBTYPE_MPEG4_VIDEO,
0xc046a911, 0xf8f1, 0x4211, 0xb8, 0xdb, 0x70, 0xe, 0xa0, 0x82, 0xd0, 0x66);

// {DB4500BB-6BB7-4435-89B6-D1735356A06A}
DEFINE_GUID(MEDIASUBTYPE_MP42_VIDEO,
0xDB4500BB, 0x6BB7, 0x4435, 0x89, 0xB6, 0xD1, 0x73, 0x53, 0x56, 0xA0, 0x6A);

// {A35F91BD-2305-450c-9698-ECF110722941}
DEFINE_GUID(MEDIASUBTYPE_MPEG4_TS,
0xa35f91bd, 0x2305, 0x450c, 0x96, 0x98, 0xec, 0xf1, 0x10, 0x72, 0x29, 0x41);

// {4D524456-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_VDRM,
0x4D524456, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_divx    0x78766964
// {78766964-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_divx,
0x78766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DIVX    0x58564944
// {58564944-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DIVX,
0x58564944, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_dvx1    0x31787664
// {31787664-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_dvx1,
0x31787664, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DVX1    0x31585644
// {31585644-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DVX1,
0x31585644, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_dx50    0x30357864
// {30357864-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_dx50,
0x30357864, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DX50    0x30355844
// {30355844-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DX50,
0x30355844, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_div3    0x33766964
// {33766964-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_div3,
0x33766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DIV3    0x33564944
// {33564944-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DIV3,
0x33564944, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_div4    0x34766964
// {34766964-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_div4,
0x34766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DIV4    0x34564944
// {34564944-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DIV4,
0x34564944, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_div5    0x35766964
// {35766964-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_div5,
0x35766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DIV5    0x35564944
// {35564944-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DIV5,
0x35564944, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_div6    0x36766964
// {36766964-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_div6,
0x36766964, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_DIV6    0x36564944
// {36564944-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DIVX_DIV6,
0x36564944, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

//Divx SubPicture DXSB -> {0x42535844-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_DXSB, 0x42535844, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_MP43    0x3334504D
// {3334504D-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_MP43,
0x3334504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_mp43    0x3334706D
// {3334706D-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_mp43,
0x3334706D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_MP41    0x3134504D
// {3134504D-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_MP41,
0x3134504D, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_H264    0x34363248
// {0x34363248-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_H264,
0x34363248, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#define FOURCC_h264    0x34363268
// {0x34363268-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_h264,
0x34363268, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

// {F7D31B0C-E03B-4017-8704-66547A871A5F}
DEFINE_GUID(MEDIASUBTYPE_MPEG2ES_VIDEO,
0xf7d31b0c, 0xe03b, 0x4017, 0x87, 0x4, 0x66, 0x54, 0x7a, 0x87, 0x1a, 0x5f);

// {E436EB89-524F-11CE-9F53-0020AF0BA770}
DEFINE_GUID(MEDIASUBTYPE_MPEG4_STREAM,
0xE436EB89, 0x524F, 0x11CE, 0x9F, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70);

// Property page interface
// {450BAF5E-541F-42A7-B1BB-1CCA4126F2FD}
DEFINE_GUID(CLSID_AVIDemuxPropertyPage,
0x450baf5e, 0x541f, 0x42a7, 0xb1, 0xbb, 0x1c, 0xca, 0x41, 0x26, 0xf2, 0xfd);

// Audio Post Processors
// {3E4DCA25-347E-4678-B22A-6F4CC68FF2A8}
DEFINE_GUID(CLSID_AudioCoreFilter,
0x3e4dca25, 0x347e, 0x4678, 0xb2, 0x2a, 0x6f, 0x4c, 0xc6, 0x8f, 0xf2, 0xa8);

// {4EF9ACFD-057E-4de1-8B67-F69DD4905581}
DEFINE_GUID(CLSID_DolbyMobileFilter,
0x4ef9acfd, 0x57e, 0x4de1, 0x8b, 0x67, 0xf6, 0x9d, 0xd4, 0x90, 0x55, 0x81);

// {0x4745504A-0000-0010-8000-00AA00389B71}
DEFINE_GUID(MEDIASUBTYPE_JPEG,
0x4745504A, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);

#endif // __AUDSHOW_H__

